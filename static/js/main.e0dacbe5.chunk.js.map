{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputFocus","useRef","useEffect","current","focus","controlChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","console","log","updatedTodos","removedItem","filter","updatedValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0dacbe5.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nfunction TodoForm(props) {\n\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\n\n    const inputFocus = useRef(null);\n\n    // used to focus on value of inputFocus\n    // useEffect is used as an alternative for componentdidmount and componentdidupdate methods\n    useEffect(() => {\n      // to get focu on text box\n        inputFocus.current.focus();\n    });\n\n    // function to get invoked when text is changed\n    const controlChange = e=>{\n      setInput(e.target.value);\n    };\n\n\n    // function to be invoked on clickling on submit button\n    const controlSubmit = e =>{\n        e.preventDefault(); // to prevent page to refreshing after submitting\n\n        // for genrating random id for each todo\n        props.onSubmit({\n        id: Math.floor(Math.random()*10000),\n        text: input\n        });\n\n        setInput(''); // onSubmit just set the state of input to an empty string\n    };\n\n    return (\n        <form className=\"todo-form\" onSubmit={controlSubmit}>\n            {props.edit ? (<>\n                <input type=\"text\" placeholder=\"Update your item....\" value={input} name=\"text\" className=\"todo-input\"\n                    onChange={controlChange} ref={inputFocus} />\n                <button className=\"todo-button\">Update</button>\n            </>):\n            (\n                <>\n                <input type=\"text\" placeholder=\"Add an item....\" value={input} name=\"text\" className=\"todo-input\"\n                    onChange={controlChange} ref={inputFocus} />\n                <button className=\"todo-button\">Add</button>\n                </>\n            )}\n        </form>\n    );\n}\n\nexport default TodoForm;\n","import React, { useState } from 'react';\nimport TodoForm from './TodoForm';\nimport { RiDeleteBin5Line } from 'react-icons/ri';\nimport { FaEdit} from 'react-icons/fa';\n\nconst Todo = ({ todos, completeTodo, removeTodo, updateTodo }) => {\n    const [edit, setEdit] = useState({\n        id: null,\n        value: ''\n    });\n\n    const submitUpdate = value => {\n        updateTodo(edit.id, value);\n        setEdit({\n            id: null,\n            value: ''\n        });\n    };\n\n    if (edit.id) {\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />;\n    }\n\n    return todos.map((todo, index) => (\n        <div\n            className={todo.isComplete ? 'todo-row complete' : 'todo-row'} // checking if a todo is complete or not\n            key={index}>\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\n                {todo.text}\n            </div>\n            <div className='icons'>\n                <RiDeleteBin5Line onClick ={()=> removeTodo(todo.id)} className=\"remove-icon\" />\n                <FaEdit onClick={()=> setEdit({id: todo.id, value: todo.text})} className=\"edit-icon\" />\n            </div>\n        </div>\n    ));\n};\n\nexport default Todo;","import React, { useState } from 'react';\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\n\nfunction TodoList() {\n    const [todos, setTodos] = useState([]); // using react useState hooks\n\n    // function for adding new todo item\n    const addTodo = todo => {\n        // check if user entered spaces for todo or left it blank\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\n            return;\n        }\n\n        const newTodos = [todo, ...todos]; // using spread operator to append todos array items with todo\n\n        setTodos(newTodos);   // updating new todos to todos array\n        console.log(...todos);\n    };\n\n    // function to remove items from todo list\n    const removeTodo = id => {\n        // checking and passing all todoitems to removedItem whose id do not match with element which is removed id\n        const removedItem = [...todos].filter(todo => todo.id !== id);\n\n        setTodos(removedItem);\n    };\n\n    // function to edit value of and todoitem\n    const updateTodo =( id, updatedValue) => {\n        if (!updatedValue.text || /^\\s*$/.test(updatedValue.text)) {\n            return;\n        }\n\n        setTodos(prev => prev.map(item => (item.id === id ? updatedValue : item)));\n\n    };\n\n  // function to check whether a todo item is completed or not\n    const completeTodo = id => {\n        let updatedTodos = todos.map(todo => {\n            if (todo.id === id) {\n                todo.isComplete = !todo.isComplete;\n            }\n            return todo;\n        });\n        setTodos(updatedTodos);\n    };\n\n    return (\n        <>\n            <h1>What you wanna do today?</h1>\n            <TodoForm onSubmit={addTodo} />\n            <Todo\n                todos={todos}\n                completeTodo={completeTodo}\n                removeTodo={removeTodo}\n                updateTodo={updateTodo}\n            />\n        </>\n    );\n}\n\nexport default TodoList;","import React from 'react';\nimport TodoList from './components/TodoList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n     <div className=\"col-6 todo-app\">\n      \n      <TodoList/>\n      \n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}